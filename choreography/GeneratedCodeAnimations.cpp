// GENERATED CODE. DO NOT CHANGE
// Trigger animations automatically using the configuration in the app, or callbacks in the BottangoArduinoCallbacks.cpp file
// Look at the method "onLateLoop" in the callbacks file for examples

// Animation Index Key:
// 0: daydream
// 1: staan


// !!! Do not change the below, unless you know what you are doing.
// !!!
// !!!


#include "GeneratedCodeAnimations.h"
#include "src/CodeCommandStreamDataSource.h"

namespace GeneratedCodeAnimations
{
    // setup
    const char SETUP_DATA_0[] PROGMEM = "rSVPin,12,2400,549,3000,981\nrSVPin,27,550,2400,3000,1968\nrSVPin,25,2400,550,3000,1475\nrSVPin,26,550,2400,3000,1475\n";
    const char *const SETUP_DATAARRAY[] PROGMEM = {SETUP_DATA_0};

    // animation 0, "daydream"
    const char ANIM_0_DATA0[] PROGMEM = "sC,26,0,12467,4096,3116,0,4096,-3116,0\nsC,25,0,12467,4096,3115,0,4096,-3116,0\nsC,27,0,10800,6281,2700,0,6281,-2700,0\nsC,12,0,7567,6281,1891,0,6281,-1891,0\nsC,12,7567,2600,6281,650,0,3921,-650,0\nsC,12,10167,3733,3921,933,0,3921,-933,0\nsC,27,10800,2333,6281,583,0,0,-583,0\nsC,25,12467,666,4096,166,0,3306,-166,0\nsC,26,12467,666,4096,166,0,3306,-166,0\nsC,25,13133,1567,3306,391,0,3306,-391,0\nsC,26,13133,1567,3306,391,0,3306,-391,0\nsC,27,13133,2067,0,516,0,0,-516,0\nsC,12,13900,800,3921,200,0,4978,-200,0\nsC,25,14700,1300,3306,325,0,1554,-325,0\nsC,26,14700,1300,3306,325,0,1554,-325,0\nsC,12,14700,1300,4978,325,0,4716,-325,0\nsC,27,15200,1567,0,391,0,4716,-391,0\nsC,25,16000,19867,1554,4966,0,1554,-4966,0\nsC,12,16000,10667,4716,2666,0,4716,-2666,0\nsC,26,16000,19867,1554,4966,0,1554,-4966,0\nsC,27,16767,9900,4716,2475,0,4716,-2475,0\nsC,12,26667,2633,4716,658,0,3651,-658,0\nsC,27,26667,2633,4716,658,0,3651,-658,0\nsC,27,29300,700,3651,175,0,4432,-175,0\nsC,12,29300,700,3651,175,0,2930,-175,0\nsC,12,30000,833,2930,208,0,2930,-208,0\nsC,27,30000,833,4432,208,0,4432,-208,0\nsC,12,30833,567,2930,141,0,4432,-141,0\nsC,27,30833,567,4432,141,0,2930,-141,0\nsC,27,31400,1300,2930,325,0,2930,-462,0\nsC,12,31400,100,4432,25,0,4432,-25,0\nsC,12,31500,500,4432,125,0,2930,-125,0\nsC,12,32000,700,2930,175,0,2930,-452,0\nsC,12,32700,1933,2930,482,0,4716,-483,0\nsC,27,32700,1933,2930,482,0,4716,-483,0\nsC,27,34633,1234,4716,308,0,4716,-308,0\nsC,12,34633,1234,4716,308,0,4716,-308,0\nsC,12,35867,3266,4716,816,0,6467,-816,0\nsC,26,35867,3266,1554,816,0,4224,-816,0\nsC,25,35867,3266,1554,816,0,4224,-816,0\nsC,27,35867,3266,4716,816,0,6467,-816,0\nsC,27,39133,1100,6467,274,0,8192,-274,0\nsC,26,39133,1234,4224,307,0,6369,-308,0\nsC,25,39133,1234,4224,308,0,4224,-308,0\nsC,12,39133,1100,6467,274,0,8192,-274,0\nsC,12,40233,1600,8192,399,0,4068,-399,0\nsC,27,40233,1600,8192,400,0,4068,-400,0\nsC,26,40367,1100,6369,275,0,7116,-275,0\nsC,25,40367,1100,4224,275,0,1443,-275,0\nsC,25,41467,366,1443,91,0,1443,-91,0\nsC,26,41467,1266,7116,316,0,2991,-316,0\nsC,27,41833,634,4068,158,0,4068,-158,0\nsC,12,41833,634,4068,158,0,4068,-158,0\nsC,25,41833,634,1443,158,0,1443,-158,0\nsC,27,42467,933,4068,233,0,6317,-233,0\nsC,12,42467,933,4068,233,0,6317,-233,0\nsC,25,42467,933,1443,233,0,4181,-233,0\nsC,26,42733,667,2991,166,0,4181,-166,0\nsC,27,43400,1333,6317,333,0,6317,-333,0\nsC,12,43400,1333,6317,333,0,6317,-333,0\nsC,25,43400,1333,4181,333,0,4181,-333,0\nsC,26,43400,1333,4181,333,0,4181,-333,0\nsC,12,44733,3967,6317,991,0,6281,-991,0\nsC,26,44733,1600,4181,400,0,1598,-400,0\nsC,27,44733,3967,6317,991,0,6281,-991,0\nsC,25,44733,1600,4181,400,0,1598,-400,0\nsC,26,46333,234,1598,58,0,1598,-58,0\nsC,25,46333,234,1598,58,0,1598,-58,0\nsC,25,46567,2133,1598,533,0,4096,-533,0\nsC,26,46567,2133,1598,533,0,4096,-533,0\nsC,25,48700,4800,4096,1200,0,4096,-1200,0\nsC,27,48700,2933,6281,733,0,1189,-733,0\nsC,26,48700,4800,4096,1200,0,4096,-1200,0\nsC,12,48700,2933,6281,733,0,1189,-733,0\nsC,27,51633,1867,1189,466,0,1189,-466,0\nsC,12,51633,1867,1189,466,0,1189,-466,0\nsC,12,53500,3067,1189,766,0,1189,-766,0\nsC,25,53500,3067,4096,766,0,4096,-766,0\nsC,26,53500,1467,4096,366,0,3137,-350,0\nsC,27,53500,3067,1189,766,0,1189,-766,0\nsC,26,54967,1600,3137,400,0,3137,-400,0\nsC,25,56567,4900,4096,1225,0,4378,-1225,0\nsC,26,56567,4900,3137,1224,0,19,-1224,0\nsC,12,56567,4900,1189,1225,0,2696,-1225,0\nsC,27,56567,4900,1189,1225,0,239,-1225,0\nsC,27,61467,2466,239,616,0,4674,-616,0\nsC,25,61467,2466,4378,616,0,4495,-616,0\nsC,12,61467,2466,2696,616,0,4674,-616,0\nsC,26,61467,2466,19,616,0,156,-616,0\nsC,25,63933,800,4495,200,0,4495,-200,0\nsC,12,63933,800,4674,200,0,4674,-200,0\nsC,26,63933,800,156,200,0,156,-200,0\nsC,27,63933,800,4674,200,0,4674,-200,0\nsC,25,64733,1400,4495,350,0,4495,-350,0\nsC,26,64733,1400,156,350,0,156,-350,0\nsC,12,64733,1634,4674,408,0,1298,-408,0\nsC,27,64733,1634,4674,408,0,1298,-408,0\nsC,26,66133,1400,156,350,0,4068,-350,0\nsC,25,66133,1400,4495,350,0,4068,-350,0\nsC,27,66367,2300,1298,575,0,1298,-575,0\nsC,12,66367,2300,1298,575,0,1298,-575,0\nsC,26,67533,1134,4068,283,0,4068,-283,0\nsC,25,67533,1134,4068,283,0,4068,-283,0\nsC,25,68667,2400,4068,599,0,4068,-600,0\nsC,26,68667,2400,4068,599,0,4068,-600,0\nsC,27,68667,5533,1298,1383,0,1298,-1383,0\nsC,12,68667,5533,1298,1383,0,1298,-1383,0\nsC,25,71067,1833,4068,458,0,1884,-457,0\nsC,26,71067,1833,4068,458,0,6330,-457,0\nsC,25,72900,6300,1884,1574,0,1884,-1574,0\nsC,26,72900,6300,6330,1574,0,6330,-1574,0\nsC,12,74200,1867,1298,466,0,6142,-466,0\nsC,27,74200,5000,1298,1249,0,1298,-1249,0\nsC,12,76067,3133,6142,783,0,6142,-783,0\nsC,12,79200,1533,6142,383,0,5675,-383,0\nsC,27,79200,1533,1298,382,0,5675,-383,0\nsC,26,79200,1533,6330,383,0,4032,-383,0\nsC,25,79200,1533,1884,383,0,4032,-383,0\nsC,27,80733,467,5675,116,0,5675,-116,0\nsC,25,80733,9734,4032,2432,0,4032,-2432,0\nsC,12,80733,467,5675,116,0,5675,-116,0\nsC,26,80733,9734,4032,2432,0,4032,-2432,0\nsC,27,81200,533,5675,133,0,1235,-133,0\nsC,12,81200,533,5675,133,0,1235,-133,0\nsC,27,81733,5300,1235,1325,0,1235,-1325,0\nsC,12,81733,5300,1235,1325,0,1235,-1324,0\nsC,12,87033,1634,1235,408,0,3745,-408,0\nsC,27,87033,1634,1235,408,0,3745,-408,0\nsC,27,88667,500,3745,125,0,3745,-125,0\nsC,12,88667,500,3745,125,0,3745,-125,0\nsC,27,89167,533,3745,133,0,3304,-133,0\nsC,12,89167,533,3745,131,0,3304,-131,0\nsC,27,89700,533,3304,133,0,3745,-133,0\nsC,12,89700,533,3304,133,0,3745,-133,0\nsC,12,90233,867,3745,216,0,0,-216,0\nsC,27,90233,867,3745,216,0,0,-216,0\nsC,26,90467,966,4032,241,0,2192,-241,0\nsC,25,90467,966,4032,241,0,2192,-241,0\nsC,27,91100,6767,0,1691,0,0,-1691,0\nsC,12,91100,6767,0,1691,0,0,-1691,0\nsC,26,91433,7534,2192,1883,0,2192,-1883,0\nsC,25,91433,7534,2192,1883,0,2192,-1883,0\nsC,27,97867,5566,0,1391,0,6153,-1391,0\nsC,12,97867,5566,0,1391,0,6153,-1391,0\nsC,25,98967,4466,2192,1116,0,4032,-1116,0\nsC,26,98967,4466,2192,1116,0,4032,-1116,0\nsC,27,103433,2600,6153,650,0,6153,-650,0\nsC,26,103433,2600,4032,650,0,4032,-650,0\nsC,12,103433,2600,6153,650,0,6153,-650,0\nsC,25,103433,2600,4032,650,0,4032,-650,0\nsC,12,106033,3500,6153,875,0,3052,-875,0\nsC,26,106033,3500,4032,875,0,840,-875,0\nsC,27,106033,3500,6153,875,0,3052,-875,0\nsC,25,106033,3500,4032,875,0,840,-875,0\nsC,26,109533,9367,840,2341,0,840,-2341,0\nsC,25,109533,9367,840,2341,0,840,-2341,0\nsC,27,109533,9367,3052,2341,0,3052,-2341,0\nsC,12,109533,9367,3052,2341,0,3052,-2341,0\nsC,27,118900,3067,3052,766,0,6153,-766,0\nsC,26,118900,3067,840,766,0,4032,-766,0\nsC,12,118900,3067,3052,766,0,6153,-766,0\nsC,25,118900,3067,840,766,0,4032,-766,0\nsC,27,121967,1300,6153,325,0,3768,-325,0\nsC,25,121967,1300,4032,335,0,4032,-496,0\nsC,26,121967,1300,4032,335,0,4032,-496,0\nsC,12,121967,1300,6153,335,0,6153,-496,0\nsC,26,123267,1600,4032,579,0,1652,-391,0\nsC,27,123267,1600,3768,399,0,3768,-399,0\nsC,25,123267,1600,4032,579,0,1652,-391,0\nsC,12,123267,1600,6153,579,0,4504,-391,0\n\n";
    const char *const ANIM_0_DATAARRAY[] PROGMEM = {ANIM_0_DATA0};
    const char ANIM_0_LOOP[] PROGMEM = "sC,12,200000,268,4504,134,0,6281,-134,0\nsC,27,200000,378,3768,189,0,6281,-189,0\nsC,25,200000,368,1652,184,0,4096,-184,0\nsC,26,200000,368,1652,184,0,4096,-184,0\n";
    const uint16_t ANIM_0_CONFIG[] PROGMEM = {0, 0, 0, 23, 0, 0, 0, 0};

    // animation 1, "staan"
    const char ANIM_1_DATA0[] PROGMEM = "\n";
    const char *const ANIM_1_DATAARRAY[] PROGMEM = {ANIM_1_DATA0};
    const char ANIM_1_LOOP[] PROGMEM = "";
    const uint16_t ANIM_1_CONFIG[] PROGMEM = {1, 0, 0, 0, 0, 0, 0, 0};


    // configs
    const uint16_t *const CONFIGS_ARRAY[] PROGMEM = {ANIM_0_CONFIG, ANIM_1_CONFIG};

    CommandStream *GenerateSetupCommandStream()
    {
        return new CommandStream(new CodeCommandStreamDataSource(SETUP_DATAARRAY, 1));
    }

    CommandStream *GenerateCommandStreamByIndex(byte animationIndex)
    {
        switch (animationIndex)
        {
        case 0:
            return new CommandStream(new CodeCommandStreamDataSource(ANIM_0_DATAARRAY, 1, ANIM_0_LOOP));
        case 1:
            return new CommandStream(new CodeCommandStreamDataSource(ANIM_1_DATAARRAY, 1, ANIM_1_LOOP));

        }
        return nullptr;
    }

    byte getAnimationCount()
    {
        return 2;
    }

    const uint16_t *getConfigValues(uint8_t animationIndex)
    {
        // AVR Needs to move it to sram    
#if defined(ARDUINO_ARCH_AVR)
#define CONFIG_SIZE 8

        static uint16_t copy[CONFIG_SIZE];
        const uint16_t *flashPtr =
            (const uint16_t *)pgm_read_word_near(&CONFIGS_ARRAY[animationIndex]);

        for (uint8_t i = 0; i < CONFIG_SIZE; i++)
        {
            copy[i] = pgm_read_word_near(&flashPtr[i]);
        }
        return copy;
#else
        // Everything else can use normal accessing
        return CONFIGS_ARRAY[animationIndex];
#endif
    }
}
